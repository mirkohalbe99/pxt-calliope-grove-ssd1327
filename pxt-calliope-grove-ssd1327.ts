/**
 * Functions for the greyscale OLED from Seeed Studio (96x96 pixel)
 * based on the SeeedStudio library https://github.com/Seeed-Studio/OLED_Display_96X96
 * Although the manufacturer website says that the v2.1 OLED uses the SSH1107G driver IC
 * mine only works with the code for the SSD1327.
 * Because setting contrast has no effect I removed the function.
 * clearDisplay didn't work reliably in the original code so I followed the hint given here
 * https://www.cs.sfu.ca/CourseCentral/433/bfraser/other/2016-student-howtos/GroveOLEDviaI2C.pdf
 * Added extended characters.
 * drawBitmap changed to work without byte paramater.
 */
enum ScrollDirection {
    //% blockId="oled_ssd1327_ScrollDirectionLeft" block="left"
    left = 0,
    //% blockId="oled_ssd1327_ScrollDirectionRight" block="right"
    right = 1
}
enum ScrollSpeed {
    //% blockId="oled_ssd1327_Speed2Frames" block="2 frames"
    scroll2frames = 7,
    //% blockId="oled_ssd1327_Speed3Frames" block="3 frames"
    scroll3frames = 4,
    //% blockId="oled_ssd1327_Speed4Frames" block="4 frames"
    scroll4frames = 5,
    //% blockId="oled_ssd1327_Speed5Frames" block="5 frames"
    scroll5frames = 0,
    //% blockId="oled_ssd1327_Speed25Frames" block="25 frames"
    scroll25frames = 6,
    //% blockId="oled_ssd1327_Speed64Frames" block="64 frames"
    scroll64frames = 1,
    //% blockId="oled_ssd1327_Speed128Frames" block="128 frames"
    scroll128frames = 2,
    //% blockId="oled_ssd1327_Speed256Frames" block="256 frames"
    scroll256frames = 3,
}
//% weight=98 color=#0fbc11 icon="\uf108" block="OLED (96x96)"
//% parts="oled_ssd1327"
namespace oled_ssd1327 {
    const i2cAddress: number = 0x3C
    const commandMode: number = 0x8000
    const dataMode: number = 0x4000
    const basicFont: int8[][] = [
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // " "
        [0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00], // "!"
        [0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00], // """
        [0x00, 0x14, 0x7F, 0x14, 0x7F, 0x14, 0x00, 0x00], // "#"
        [0x00, 0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00, 0x00], // "$"
        [0x00, 0x23, 0x13, 0x08, 0x64, 0x62, 0x00, 0x00], // "%"
        [0x00, 0x36, 0x49, 0x55, 0x22, 0x50, 0x00, 0x00], // "&"
        [0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0x00, 0x00], // "'"
        [0x00, 0x1C, 0x22, 0x41, 0x00, 0x00, 0x00, 0x00], // "("
        [0x00, 0x41, 0x22, 0x1C, 0x00, 0x00, 0x00, 0x00], // ")"
        [0x00, 0x08, 0x2A, 0x1C, 0x2A, 0x08, 0x00, 0x00], // "*"
        [0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x00], // "+"
        [0x00, 0xA0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00], // ","
        [0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00], // "-"
        [0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00], // "."
        [0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00], // "/"
        [0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00, 0x00], // "0"
        [0x00, 0x00, 0x42, 0x7F, 0x40, 0x00, 0x00, 0x00], // "1"
        [0x00, 0x62, 0x51, 0x49, 0x49, 0x46, 0x00, 0x00], // "2"
        [0x00, 0x22, 0x41, 0x49, 0x49, 0x36, 0x00, 0x00], // "3"
        [0x00, 0x18, 0x14, 0x12, 0x7F, 0x10, 0x00, 0x00], // "4"
        [0x00, 0x27, 0x45, 0x45, 0x45, 0x39, 0x00, 0x00], // "5"
        [0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30, 0x00, 0x00], // "6"
        [0x00, 0x01, 0x71, 0x09, 0x05, 0x03, 0x00, 0x00], // "7"
        [0x00, 0x36, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00], // "8"
        [0x00, 0x06, 0x49, 0x49, 0x29, 0x1E, 0x00, 0x00], // "9"
        [0x00, 0x00, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00], // ":"
        [0x00, 0x00, 0xAC, 0x6C, 0x00, 0x00, 0x00, 0x00], // ";"
        [0x00, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00, 0x00], // "<"
        [0x00, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 0x00], // "="
        [0x00, 0x41, 0x22, 0x14, 0x08, 0x00, 0x00, 0x00], // ">"
        [0x00, 0x02, 0x01, 0x51, 0x09, 0x06, 0x00, 0x00], // "?"
        [0x00, 0x32, 0x49, 0x79, 0x41, 0x3E, 0x00, 0x00], // "@"
        [0x00, 0x7E, 0x09, 0x09, 0x09, 0x7E, 0x00, 0x00], // "A"
        [0x00, 0x7F, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00], // "B"
        [0x00, 0x3E, 0x41, 0x41, 0x41, 0x22, 0x00, 0x00], // "C"
        [0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C, 0x00, 0x00], // "D"
        [0x00, 0x7F, 0x49, 0x49, 0x49, 0x41, 0x00, 0x00], // "E"
        [0x00, 0x7F, 0x09, 0x09, 0x09, 0x01, 0x00, 0x00], // "F"
        [0x00, 0x3E, 0x41, 0x41, 0x51, 0x72, 0x00, 0x00], // "G"
        [0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00, 0x00], // "H"
        [0x00, 0x41, 0x7F, 0x41, 0x00, 0x00, 0x00, 0x00], // "I"
        [0x00, 0x20, 0x40, 0x41, 0x3F, 0x01, 0x00, 0x00], // "J"
        [0x00, 0x7F, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00], // "K"
        [0x00, 0x7F, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00], // "L"
        [0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F, 0x00, 0x00], // "M"
        [0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00, 0x00], // "N"
        [0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00, 0x00], // "O"
        [0x00, 0x7F, 0x09, 0x09, 0x09, 0x06, 0x00, 0x00], // "P"
        [0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00, 0x00], // "Q"
        [0x00, 0x7F, 0x09, 0x19, 0x29, 0x46, 0x00, 0x00], // "R"
        [0x00, 0x26, 0x49, 0x49, 0x49, 0x32, 0x00, 0x00], // "S"
        [0x00, 0x01, 0x01, 0x7F, 0x01, 0x01, 0x00, 0x00], // "T"
        [0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00, 0x00], // "U"
        [0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F, 0x00, 0x00], // "V"
        [0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F, 0x00, 0x00], // "W"
        [0x00, 0x63, 0x14, 0x08, 0x14, 0x63, 0x00, 0x00], // "X"
        [0x00, 0x03, 0x04, 0x78, 0x04, 0x03, 0x00, 0x00], // "Y"
        [0x00, 0x61, 0x51, 0x49, 0x45, 0x43, 0x00, 0x00], // "Z"
        [0x00, 0x7F, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00], // "["
        [0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00], // "\"
        [0x00, 0x41, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x00], // "]"
        [0x00, 0x04, 0x02, 0x01, 0x02, 0x04, 0x00, 0x00], // "^"
        [0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00], // "_"
        [0x00, 0x01, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00], // "`"
        [0x00, 0x20, 0x54, 0x54, 0x54, 0x78, 0x00, 0x00], // "a"
        [0x00, 0x7F, 0x48, 0x44, 0x44, 0x38, 0x00, 0x00], // "b"
        [0x00, 0x38, 0x44, 0x44, 0x28, 0x00, 0x00, 0x00], // "c"
        [0x00, 0x38, 0x44, 0x44, 0x48, 0x7F, 0x00, 0x00], // "d"
        [0x00, 0x38, 0x54, 0x54, 0x54, 0x18, 0x00, 0x00], // "e"
        [0x00, 0x08, 0x7E, 0x09, 0x02, 0x00, 0x00, 0x00], // "f"
        [0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C, 0x00, 0x00], // "g"
        [0x00, 0x7F, 0x08, 0x04, 0x04, 0x78, 0x00, 0x00], // "h"
        [0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00], // "i"
        [0x00, 0x80, 0x84, 0x7D, 0x00, 0x00, 0x00, 0x00], // "j"
        [0x00, 0x7F, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00], // "k"
        [0x00, 0x41, 0x7F, 0x40, 0x00, 0x00, 0x00, 0x00], // "l"
        [0x00, 0x7C, 0x04, 0x18, 0x04, 0x78, 0x00, 0x00], // "m"
        [0x00, 0x7C, 0x08, 0x04, 0x7C, 0x00, 0x00, 0x00], // "n"
        [0x00, 0x38, 0x44, 0x44, 0x38, 0x00, 0x00, 0x00], // "o"
        [0x00, 0xFC, 0x24, 0x24, 0x18, 0x00, 0x00, 0x00], // "p"
        [0x00, 0x18, 0x24, 0x24, 0xFC, 0x00, 0x00, 0x00], // "q"
        [0x00, 0x00, 0x7C, 0x08, 0x04, 0x00, 0x00, 0x00], // "r"
        [0x00, 0x48, 0x54, 0x54, 0x24, 0x00, 0x00, 0x00], // "s"
        [0x00, 0x04, 0x7F, 0x44, 0x00, 0x00, 0x00, 0x00], // "t"
        [0x00, 0x3C, 0x40, 0x40, 0x7C, 0x00, 0x00, 0x00], // "u"
        [0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C, 0x00, 0x00], // "v"
        [0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C, 0x00, 0x00], // "w"
        [0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x00], // "x"
        [0x00, 0x1C, 0xA0, 0xA0, 0x7C, 0x00, 0x00, 0x00], // "y"
        [0x00, 0x44, 0x64, 0x54, 0x4C, 0x44, 0x00, 0x00], // "z"
        [0x00, 0x08, 0x36, 0x41, 0x00, 0x00, 0x00, 0x00], // "{"
        [0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00], // "|"
        [0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00], // "}"
        [0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00]  // "~"
    ]
    const extendedCharacters: int8[][] = [
        [0x00, 0x7D, 0x0A, 0x09, 0x0A, 0x7D, 0x00, 0x00], // "Ä"
        [0x00, 0x3D, 0x42, 0x41, 0x42, 0x3D, 0x00, 0x00], // "Ö"
        [0x00, 0x3D, 0x40, 0x40, 0x40, 0x3D, 0x00, 0x00], // "Ü"
        [0x00, 0x21, 0x54, 0x54, 0x55, 0x78, 0x00, 0x00], // "ä"
        [0x00, 0x39, 0x44, 0x44, 0x39, 0x00, 0x00, 0x00], // "ö"
        [0x00, 0x3D, 0x40, 0x40, 0x7D, 0x00, 0x00, 0x00], // "ü"
        [0x00, 0xFE, 0x09, 0x49, 0x36, 0x00, 0x00, 0x00], // "ß"
        [0x00, 0x14, 0x3E, 0x55, 0x55, 0x55, 0x14, 0x00], // "€"
        [0x00, 0x02, 0x05, 0x02, 0x00, 0x00, 0x00, 0x00], // "°"
        [0x00, 0x0A, 0x55, 0x55, 0x55, 0x28, 0x00, 0x00]  // "§"
    ]
    let grayLvl = 15
    /**
     * Initialises the display.
     */
    //% blockId="oled_ssd1327_init" block="initialize OLED"
    //% parts="oled_ssd1327"
    export function init() {
        displayCmds([0xae, 0xd5, 0x50, 0x20, 0x81, 0x80, 0xa0, 0xa4,
            0xa6, 0xad, 0x80, 0xc0, 0xd9, 0x1f, 0xdb, 0x27,
            0xaf, 0xb0, 0x00, 0x11])
    }
    function resetAdressing() {
        displayCmds([0xA0, 0xC8])
    }
    function displayCmds(cmds: number[]) {
        for (let i = 0; i < cmds.length; i++) {
            pins.i2cWriteNumber(i2cAddress, commandMode + cmds[i], NumberFormat.UInt16BE)
        }
    }
    /**
     * Sets the display to horizontal mode.
     */
    //% blockId="oled_ssd1327_setHorizontalMode" block="set OLED to horizontal mode"
    //% parts="oled_ssd1327"
    //% advanced=true
    export function setHorizontalMode() {
        displayCmds([0xa0, 0x42])
        resetAdressing()
    }
    /**
     * Sets the display to vertical mode.
     */
    //% blockId="oled_ssd1327_setVerticalMode" block="set OLED to vertical mode"
    //% parts="oled_ssd1327"
    //% advanced=true
    export function setVerticalMode() {
        displayCmds([0xa0, 0x46])
    }
    /**
     * Sets the cursor to row and column.
     * @param row row, eg:5
     * @param col col, eg:0
     */
    //% row.min=0 row.max=11
    //% col.min=0 col.max=11
    //% blockId="oled_ssd1327_setTextXY" block="sets Text to %row|%col"
    //% parts="oled_ssd1327"
    export function setTextXY(row: number, col: number) {
        displayCmds([0x15, 0x08 + (col * 4), 0x37, 0x75, 0x00 + (row * 8), 0x07 + (row * 8)])
    }
    /**
     * Clears the display.
     */
    //% blockId="oled_ssd1327_clearDisplay" block="clear OLED"
    //% parts="oled_ssd1327"
    export function clearDisplay() {
        displayCmds([0x75, 0x00, 0x5f, 0x15, 0x08, 0x37])
        for (let j = 0; j < 16; j++) {
            displayCmds([(0xb0 + j), 0x0, 0x10])
            for (let i = 0; i < 128; i++) {
                displayCmds([0x00])
            }
        }
    }
    /**
     * Set gray level of the display.
     * @param grayLevel gray level, eg:15
     */
    //% grayLevel.min=0 grayLevel.max=15
    //% blockId="oled_ssd1327_setGrayLevel" block="sets gray level to %grayLevel"
    //% parts="oled_ssd1327"
    export function setGrayLevel(grayLevel: number) {
        grayLvl = grayLevel
    }
    function putChar(theChar: string) {
        let char: int8[]
        switch (theChar.charCodeAt(0)) {
            case 196: char = extendedCharacters[0]; break;
            case 214: char = extendedCharacters[1]; break;
            case 220: char = extendedCharacters[2]; break;
            case 228: char = extendedCharacters[3]; break;
            case 246: char = extendedCharacters[4]; break;
            case 252: char = extendedCharacters[5]; break;
            case 223: char = extendedCharacters[6]; break;
            case 172: char = extendedCharacters[7]; break;
            case 176: char = extendedCharacters[8]; break;
            case 167: char = extendedCharacters[9]; break;
            default:
                if (theChar.charCodeAt(0) < 32 || theChar.charCodeAt(0) > 126) {
                    theChar = " "
                }
                char = basicFont[theChar.charCodeAt(0) - 32]
                break;
        }
        for (let i = 0; i < 8; i = i + 2) {
            let charColumn1 = char[i]
            let charColumn2 = char[i + 1]
            for (let j = 0; j < 8; j++) {
                let pixel1 = charColumn1 % 2
                let pixel2 = charColumn2 % 2
                let charData = (pixel1 * 16 * grayLvl) + (pixel2 * grayLvl)
                pins.i2cWriteNumber(i2cAddress, dataMode + charData, NumberFormat.UInt16BE)
                charColumn1 = charColumn1 / 2
                charColumn2 = charColumn2 / 2
            }
        }
    }
    /**
     * Writes a text.
     * @param text text to be written, eg:"Hello World!"
     */
    //% blockId="oled_ssd1327_putString" block="write text %text"
    //% parts="oled_ssd1327"
    export function putString(text: string) {
        for (let p = 0; p < text.length; p++) {
            putChar(text.substr(p, 1))
        }
    }
    /**
     * Writes a number.
     * @param theNumber number, eg:-1234
     */
    //% blockId="oled_ssd1327_putNumber" block="write number %theNumber"
    //% parts="oled_ssd1327"
    export function putNumber(theNumber: number) {
        putString(theNumber.toString())
    }
    /**
     * Draws a bitmap. Size should be 96 x 96 bits aranged in 12 * 96 bytes. 
     * Each bit is one pixel using only one gray for all pixels.
     */
    //% blockId="oled_ssd1327_drawBitmap" block="draws the bitmap"
    //% parts="oled_ssd1327"
    export function drawBitmap(bitmap: int8[]) {
        const grayValue = 15
        setHorizontalMode()
        for (let i = 0; i < bitmap.length; i++) {
            let byte = bitmap[i]
            for (let j = 0; j < 8; j = j + 2) {
                let pixel1 = byte % 2
                byte = byte / 2
                let pixel2 = byte % 2
                byte = byte / 2
                pins.i2cWriteNumber(i2cAddress,
                    dataMode + (pixel1 * 16 * grayValue) + (pixel2 * grayValue),
                    NumberFormat.UInt16BE)
            }
        }
        setVerticalMode()
    }
    /**
     * Sets area, direction and speed for horizontal scrolling.
     * @param direction direction of scrolling, eg:ScrollDirection.left
     * @param startRow first row of scroll area, eg:24
     * @param endRow last row of scroll area, eg:72
     * @param startColumn left column of scroll area, eg:8
     * @param endColumn right column of scroll area, eg:88
     * @param speed speed of scrolling, eg:ScrollSpeed.scroll2frames
     */
    //% startRow.min=0 startRow.max=95
    //% endRow.min=0 endRow.max=95
    //% startColumn.min=0 startColumn.max=95
    //% endColumn.min=0 endColumn.max=95
    //% speed.min=0 speed.max=7
    //% blockId="oled_ssd1327_setHorizontalScrollProperties" 
    //% block="set scroll direction %direction|first row %startRow|last row %endRow|first column %startColumn|last column %endColumn|scroll speed %speed"
    //% parts="oled_ssd1327"
    //% advanced=true
    export function setHorizontalScrollProperties(direction: ScrollDirection, startRow: number, endRow: number, startColumn: number, endColumn: number, speed: ScrollSpeed) {
        if (direction == ScrollDirection.right) {
            displayCmds([0x27])
        } else {
            displayCmds([0x26])
        }
        displayCmds([0x00, startRow, speed, endRow, startColumn + 8, endColumn + 8, 0x00])
    }
    /**
     * Activates scrolling.
     */
    //% blockId="oled_ssd1327_activateScroll" block="activate scrolling"
    //% parts="oled_ssd1327"
    //% advanced=true
    export function activateScroll() {
        displayCmds([0x2f])
    }
    /**
     * Deactivates scrolling.
     */
    //% blockId="oled_ssd1327_deactivateScroll" block="deactivate scrolling"
    //% parts="oled_ssd1327"
    //% advanced=true
    export function deactivateScroll() {
        displayCmds([0x2e])
    }
    /**
     * Sets the display to normal mode.
     */
    //% blockId="oled_ssd1327_setNormalDisplay" block="set OLED to normal mode"
    //% parts="oled_ssd1327"
    //% advanced=true
    export function setNormalDisplay() {
        displayCmds([0xa4])
    }
    /**
     * Sets the display to inverse mode.
     */
    //% blockId="oled_ssd1327_setInverseDisplay" block="set OLED to inverse mode"
    //% parts="oled_ssd1327"
    //% advanced=true
    export function setInverseDisplay() {
        displayCmds([0xa7])
    }
}
